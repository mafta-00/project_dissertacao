import numpy as np
import cv2
import skimage.morphology as mm


# funcao FRAME : acrescenta uma borda à imagem
def frame(a,tipo):
    z = np.zeros(a.shape,dtype=tipo) 
    if tipo == 'bool':
        z[0,:] = True
        z[-1,:] = True
        z[:,0] = True
        z[:,-1] = True
    else:
        z[0,:] = 1
        z[-1,:] = 1
        z[:,0] = 1
        z[:,-1] = 1        
    return z

def fechaburacos(a,Bc):
    aneg = 255 - a
    f = 255*frame(a,'uint8')
    f = np.minimum(f,aneg)
    abe = 255 - mm.reconstruction(f,aneg,selem=Bc)
    return abe

def visualiza(a,b):
    # Cria as bandas coloridas
    ar = a.copy()
    ag = a.copy()
    ab = a.copy()
    b2 = mm.dilation(b) - mm.erosion(b)
    # Atribui a cor vermelha às bandas
    ar[b2>0] = 255
    ag[b2>0] = 0
    ab[b2>0] = 0
    # Junta as bandas
    return np.dstack((np.dstack((ab,ag)),ar))


# a = cv2.imread('TW 01.jpg',0)
a = cv2.imread('controle 01.jpg',0)


B = mm.disk(20)
B2 = mm.disk(5)
Bc = np.array([[0,1,0],[1,1,1],[0,1,0]])

# 1
op1 = mm.dilation(a,selem=B)
op1 = np.int32(mm.reconstruction(op1,a, method='erosion', selem=Bc))
op1 = np.uint8(op1)

# 2
op2 = mm.dilation(a,selem=B2)
op2 = np.int32(mm.reconstruction(op2,a, method='erosion', selem=Bc))
op2 = np.uint8(op2)

# 3
op3 = op1 - op2

# 4
op4 = op3 >= 20
op4 = np.uint8(255*op4)

# 5
op5 = fechaburacos(op4,Bc)

# Visualizando...
cv2.imshow('orig',a)
cv2.imshow('op5',op5)
cv2.imshow('visualiza',visualiza(a, op5))
cv2.waitKey(0)
cv2.destroyAllWindows()
